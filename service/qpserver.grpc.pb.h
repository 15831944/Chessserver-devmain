// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: qpserver.proto
#ifndef GRPC_qpserver_2eproto__INCLUDED
#define GRPC_qpserver_2eproto__INCLUDED

#include "qpserver.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace qpserver {

class Logon final {
 public:
  static constexpr char const* service_full_name() {
    return "qpserver.Logon";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SendSms(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::qpserver::RepRet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> AsyncSendSms(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(AsyncSendSmsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> PrepareAsyncSendSms(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(PrepareAsyncSendSmsRaw(context, request, cq));
    }
    virtual ::grpc::Status VerifySms(::grpc::ClientContext* context, const ::qpserver::ReqVerifySms& request, ::qpserver::RepRet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> AsyncVerifySms(::grpc::ClientContext* context, const ::qpserver::ReqVerifySms& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(AsyncVerifySmsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> PrepareAsyncVerifySms(::grpc::ClientContext* context, const ::qpserver::ReqVerifySms& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(PrepareAsyncVerifySmsRaw(context, request, cq));
    }
    virtual ::grpc::Status EraseSms(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::qpserver::RepRet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> AsyncEraseSms(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(AsyncEraseSmsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> PrepareAsyncEraseSms(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(PrepareAsyncEraseSmsRaw(context, request, cq));
    }
    virtual ::grpc::Status RegPreVerify(::grpc::ClientContext* context, const ::qpserver::ReqRegVerifyItem& request, ::qpserver::RepRet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> AsyncRegPreVerify(::grpc::ClientContext* context, const ::qpserver::ReqRegVerifyItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(AsyncRegPreVerifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> PrepareAsyncRegPreVerify(::grpc::ClientContext* context, const ::qpserver::ReqRegVerifyItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(PrepareAsyncRegPreVerifyRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateUser(::grpc::ClientContext* context, const ::qpserver::ReqUpdUser& request, ::qpserver::RepRet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> AsyncUpdateUser(::grpc::ClientContext* context, const ::qpserver::ReqUpdUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(AsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> PrepareAsyncUpdateUser(::grpc::ClientContext* context, const ::qpserver::ReqUpdUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(PrepareAsyncUpdateUserRaw(context, request, cq));
    }
    virtual ::grpc::Status MapUser(::grpc::ClientContext* context, const ::qpserver::ReqMapUser& request, ::qpserver::RepRet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> AsyncMapUser(::grpc::ClientContext* context, const ::qpserver::ReqMapUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(AsyncMapUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> PrepareAsyncMapUser(::grpc::ClientContext* context, const ::qpserver::ReqMapUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(PrepareAsyncMapUserRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* AsyncSendSmsRaw(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* PrepareAsyncSendSmsRaw(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* AsyncVerifySmsRaw(::grpc::ClientContext* context, const ::qpserver::ReqVerifySms& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* PrepareAsyncVerifySmsRaw(::grpc::ClientContext* context, const ::qpserver::ReqVerifySms& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* AsyncEraseSmsRaw(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* PrepareAsyncEraseSmsRaw(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* AsyncRegPreVerifyRaw(::grpc::ClientContext* context, const ::qpserver::ReqRegVerifyItem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* PrepareAsyncRegPreVerifyRaw(::grpc::ClientContext* context, const ::qpserver::ReqRegVerifyItem& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::qpserver::ReqUpdUser& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::qpserver::ReqUpdUser& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* AsyncMapUserRaw(::grpc::ClientContext* context, const ::qpserver::ReqMapUser& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* PrepareAsyncMapUserRaw(::grpc::ClientContext* context, const ::qpserver::ReqMapUser& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SendSms(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::qpserver::RepRet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> AsyncSendSms(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(AsyncSendSmsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> PrepareAsyncSendSms(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(PrepareAsyncSendSmsRaw(context, request, cq));
    }
    ::grpc::Status VerifySms(::grpc::ClientContext* context, const ::qpserver::ReqVerifySms& request, ::qpserver::RepRet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> AsyncVerifySms(::grpc::ClientContext* context, const ::qpserver::ReqVerifySms& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(AsyncVerifySmsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> PrepareAsyncVerifySms(::grpc::ClientContext* context, const ::qpserver::ReqVerifySms& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(PrepareAsyncVerifySmsRaw(context, request, cq));
    }
    ::grpc::Status EraseSms(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::qpserver::RepRet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> AsyncEraseSms(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(AsyncEraseSmsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> PrepareAsyncEraseSms(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(PrepareAsyncEraseSmsRaw(context, request, cq));
    }
    ::grpc::Status RegPreVerify(::grpc::ClientContext* context, const ::qpserver::ReqRegVerifyItem& request, ::qpserver::RepRet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> AsyncRegPreVerify(::grpc::ClientContext* context, const ::qpserver::ReqRegVerifyItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(AsyncRegPreVerifyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> PrepareAsyncRegPreVerify(::grpc::ClientContext* context, const ::qpserver::ReqRegVerifyItem& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(PrepareAsyncRegPreVerifyRaw(context, request, cq));
    }
    ::grpc::Status UpdateUser(::grpc::ClientContext* context, const ::qpserver::ReqUpdUser& request, ::qpserver::RepRet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> AsyncUpdateUser(::grpc::ClientContext* context, const ::qpserver::ReqUpdUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(AsyncUpdateUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> PrepareAsyncUpdateUser(::grpc::ClientContext* context, const ::qpserver::ReqUpdUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(PrepareAsyncUpdateUserRaw(context, request, cq));
    }
    ::grpc::Status MapUser(::grpc::ClientContext* context, const ::qpserver::ReqMapUser& request, ::qpserver::RepRet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> AsyncMapUser(::grpc::ClientContext* context, const ::qpserver::ReqMapUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(AsyncMapUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> PrepareAsyncMapUser(::grpc::ClientContext* context, const ::qpserver::ReqMapUser& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(PrepareAsyncMapUserRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* AsyncSendSmsRaw(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* PrepareAsyncSendSmsRaw(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* AsyncVerifySmsRaw(::grpc::ClientContext* context, const ::qpserver::ReqVerifySms& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* PrepareAsyncVerifySmsRaw(::grpc::ClientContext* context, const ::qpserver::ReqVerifySms& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* AsyncEraseSmsRaw(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* PrepareAsyncEraseSmsRaw(::grpc::ClientContext* context, const ::qpserver::ReqSendSms& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* AsyncRegPreVerifyRaw(::grpc::ClientContext* context, const ::qpserver::ReqRegVerifyItem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* PrepareAsyncRegPreVerifyRaw(::grpc::ClientContext* context, const ::qpserver::ReqRegVerifyItem& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* AsyncUpdateUserRaw(::grpc::ClientContext* context, const ::qpserver::ReqUpdUser& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* PrepareAsyncUpdateUserRaw(::grpc::ClientContext* context, const ::qpserver::ReqUpdUser& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* AsyncMapUserRaw(::grpc::ClientContext* context, const ::qpserver::ReqMapUser& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* PrepareAsyncMapUserRaw(::grpc::ClientContext* context, const ::qpserver::ReqMapUser& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendSms_;
    const ::grpc::internal::RpcMethod rpcmethod_VerifySms_;
    const ::grpc::internal::RpcMethod rpcmethod_EraseSms_;
    const ::grpc::internal::RpcMethod rpcmethod_RegPreVerify_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateUser_;
    const ::grpc::internal::RpcMethod rpcmethod_MapUser_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SendSms(::grpc::ServerContext* context, const ::qpserver::ReqSendSms* request, ::qpserver::RepRet* response);
    virtual ::grpc::Status VerifySms(::grpc::ServerContext* context, const ::qpserver::ReqVerifySms* request, ::qpserver::RepRet* response);
    virtual ::grpc::Status EraseSms(::grpc::ServerContext* context, const ::qpserver::ReqSendSms* request, ::qpserver::RepRet* response);
    virtual ::grpc::Status RegPreVerify(::grpc::ServerContext* context, const ::qpserver::ReqRegVerifyItem* request, ::qpserver::RepRet* response);
    virtual ::grpc::Status UpdateUser(::grpc::ServerContext* context, const ::qpserver::ReqUpdUser* request, ::qpserver::RepRet* response);
    virtual ::grpc::Status MapUser(::grpc::ServerContext* context, const ::qpserver::ReqMapUser* request, ::qpserver::RepRet* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendSms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendSms() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendSms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSms(::grpc::ServerContext* context, const ::qpserver::ReqSendSms* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendSms(::grpc::ServerContext* context, ::qpserver::ReqSendSms* request, ::grpc::ServerAsyncResponseWriter< ::qpserver::RepRet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_VerifySms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_VerifySms() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_VerifySms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySms(::grpc::ServerContext* context, const ::qpserver::ReqVerifySms* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestVerifySms(::grpc::ServerContext* context, ::qpserver::ReqVerifySms* request, ::grpc::ServerAsyncResponseWriter< ::qpserver::RepRet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EraseSms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_EraseSms() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_EraseSms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EraseSms(::grpc::ServerContext* context, const ::qpserver::ReqSendSms* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEraseSms(::grpc::ServerContext* context, ::qpserver::ReqSendSms* request, ::grpc::ServerAsyncResponseWriter< ::qpserver::RepRet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RegPreVerify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegPreVerify() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RegPreVerify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegPreVerify(::grpc::ServerContext* context, const ::qpserver::ReqRegVerifyItem* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegPreVerify(::grpc::ServerContext* context, ::qpserver::ReqRegVerifyItem* request, ::grpc::ServerAsyncResponseWriter< ::qpserver::RepRet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateUser() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* context, const ::qpserver::ReqUpdUser* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateUser(::grpc::ServerContext* context, ::qpserver::ReqUpdUser* request, ::grpc::ServerAsyncResponseWriter< ::qpserver::RepRet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MapUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MapUser() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_MapUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MapUser(::grpc::ServerContext* context, const ::qpserver::ReqMapUser* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMapUser(::grpc::ServerContext* context, ::qpserver::ReqMapUser* request, ::grpc::ServerAsyncResponseWriter< ::qpserver::RepRet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendSms<WithAsyncMethod_VerifySms<WithAsyncMethod_EraseSms<WithAsyncMethod_RegPreVerify<WithAsyncMethod_UpdateUser<WithAsyncMethod_MapUser<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SendSms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendSms() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendSms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendSms(::grpc::ServerContext* context, const ::qpserver::ReqSendSms* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_VerifySms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_VerifySms() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_VerifySms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status VerifySms(::grpc::ServerContext* context, const ::qpserver::ReqVerifySms* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EraseSms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_EraseSms() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_EraseSms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EraseSms(::grpc::ServerContext* context, const ::qpserver::ReqSendSms* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RegPreVerify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegPreVerify() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RegPreVerify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegPreVerify(::grpc::ServerContext* context, const ::qpserver::ReqRegVerifyItem* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateUser() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* context, const ::qpserver::ReqUpdUser* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MapUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MapUser() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_MapUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MapUser(::grpc::ServerContext* context, const ::qpserver::ReqMapUser* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendSms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendSms() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::qpserver::ReqSendSms, ::qpserver::RepRet>(std::bind(&WithStreamedUnaryMethod_SendSms<BaseClass>::StreamedSendSms, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendSms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendSms(::grpc::ServerContext* context, const ::qpserver::ReqSendSms* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendSms(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qpserver::ReqSendSms,::qpserver::RepRet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_VerifySms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_VerifySms() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::qpserver::ReqVerifySms, ::qpserver::RepRet>(std::bind(&WithStreamedUnaryMethod_VerifySms<BaseClass>::StreamedVerifySms, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_VerifySms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status VerifySms(::grpc::ServerContext* context, const ::qpserver::ReqVerifySms* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedVerifySms(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qpserver::ReqVerifySms,::qpserver::RepRet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EraseSms : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_EraseSms() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::qpserver::ReqSendSms, ::qpserver::RepRet>(std::bind(&WithStreamedUnaryMethod_EraseSms<BaseClass>::StreamedEraseSms, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EraseSms() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EraseSms(::grpc::ServerContext* context, const ::qpserver::ReqSendSms* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEraseSms(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qpserver::ReqSendSms,::qpserver::RepRet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegPreVerify : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegPreVerify() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::qpserver::ReqRegVerifyItem, ::qpserver::RepRet>(std::bind(&WithStreamedUnaryMethod_RegPreVerify<BaseClass>::StreamedRegPreVerify, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegPreVerify() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegPreVerify(::grpc::ServerContext* context, const ::qpserver::ReqRegVerifyItem* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegPreVerify(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qpserver::ReqRegVerifyItem,::qpserver::RepRet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateUser() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::qpserver::ReqUpdUser, ::qpserver::RepRet>(std::bind(&WithStreamedUnaryMethod_UpdateUser<BaseClass>::StreamedUpdateUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateUser(::grpc::ServerContext* context, const ::qpserver::ReqUpdUser* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qpserver::ReqUpdUser,::qpserver::RepRet>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MapUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MapUser() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::qpserver::ReqMapUser, ::qpserver::RepRet>(std::bind(&WithStreamedUnaryMethod_MapUser<BaseClass>::StreamedMapUser, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MapUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MapUser(::grpc::ServerContext* context, const ::qpserver::ReqMapUser* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMapUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qpserver::ReqMapUser,::qpserver::RepRet>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendSms<WithStreamedUnaryMethod_VerifySms<WithStreamedUnaryMethod_EraseSms<WithStreamedUnaryMethod_RegPreVerify<WithStreamedUnaryMethod_UpdateUser<WithStreamedUnaryMethod_MapUser<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendSms<WithStreamedUnaryMethod_VerifySms<WithStreamedUnaryMethod_EraseSms<WithStreamedUnaryMethod_RegPreVerify<WithStreamedUnaryMethod_UpdateUser<WithStreamedUnaryMethod_MapUser<Service > > > > > > StreamedService;
};

class Game final {
 public:
  static constexpr char const* service_full_name() {
    return "qpserver.Game";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GamePlayStatis(::grpc::ClientContext* context, const ::qpserver::ReqInOutGame& request, ::qpserver::RepRet* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> AsyncGamePlayStatis(::grpc::ClientContext* context, const ::qpserver::ReqInOutGame& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(AsyncGamePlayStatisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>> PrepareAsyncGamePlayStatis(::grpc::ClientContext* context, const ::qpserver::ReqInOutGame& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>>(PrepareAsyncGamePlayStatisRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* AsyncGamePlayStatisRaw(::grpc::ClientContext* context, const ::qpserver::ReqInOutGame& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qpserver::RepRet>* PrepareAsyncGamePlayStatisRaw(::grpc::ClientContext* context, const ::qpserver::ReqInOutGame& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status GamePlayStatis(::grpc::ClientContext* context, const ::qpserver::ReqInOutGame& request, ::qpserver::RepRet* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> AsyncGamePlayStatis(::grpc::ClientContext* context, const ::qpserver::ReqInOutGame& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(AsyncGamePlayStatisRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>> PrepareAsyncGamePlayStatis(::grpc::ClientContext* context, const ::qpserver::ReqInOutGame& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>>(PrepareAsyncGamePlayStatisRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* AsyncGamePlayStatisRaw(::grpc::ClientContext* context, const ::qpserver::ReqInOutGame& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qpserver::RepRet>* PrepareAsyncGamePlayStatisRaw(::grpc::ClientContext* context, const ::qpserver::ReqInOutGame& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GamePlayStatis_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GamePlayStatis(::grpc::ServerContext* context, const ::qpserver::ReqInOutGame* request, ::qpserver::RepRet* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GamePlayStatis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GamePlayStatis() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GamePlayStatis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GamePlayStatis(::grpc::ServerContext* context, const ::qpserver::ReqInOutGame* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGamePlayStatis(::grpc::ServerContext* context, ::qpserver::ReqInOutGame* request, ::grpc::ServerAsyncResponseWriter< ::qpserver::RepRet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GamePlayStatis<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_GamePlayStatis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GamePlayStatis() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GamePlayStatis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GamePlayStatis(::grpc::ServerContext* context, const ::qpserver::ReqInOutGame* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GamePlayStatis : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GamePlayStatis() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::qpserver::ReqInOutGame, ::qpserver::RepRet>(std::bind(&WithStreamedUnaryMethod_GamePlayStatis<BaseClass>::StreamedGamePlayStatis, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GamePlayStatis() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GamePlayStatis(::grpc::ServerContext* context, const ::qpserver::ReqInOutGame* request, ::qpserver::RepRet* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGamePlayStatis(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qpserver::ReqInOutGame,::qpserver::RepRet>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GamePlayStatis<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GamePlayStatis<Service > StreamedService;
};

}  // namespace qpserver


#endif  // GRPC_qpserver_2eproto__INCLUDED
